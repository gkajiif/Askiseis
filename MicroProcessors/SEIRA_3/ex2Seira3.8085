ORG 0800H
IN 10H

MVI B,00H
LXI H,0A02H				; make sure that only the last 2 displays will print something
SEGMENTS:	MVI M,10H
		INX H
		INR B
		MOV A,B
		CPI 04H
		JC SEGMENTS 

INIT:	MVI A,0DH			
	SIM  				;UNMASK
	EI  				;ENABLE INTERRUPT
	MVI B,56H			;THRESHOLDS SET
	MVI C,ABH
	MVI A,00H
	
MAIN_LOOP:	JMP MAIN_LOOP		;RUNS INFINITE LOOP UNTIL INTR

INTR_ROUTINE:	EI			
		INR A				;INTERRUPT BUTTON CAUSES DOUBLE INTR EACH TIME IT IS PUSHED
		CPI 02H			;EACH TIME THE BUTTON IS PUSHED USE THIS COUNTER TO INTERRUPT ONLY ONCE
		JC MAIN_LOOP
		JMP GET_INPUT1
		
GET_INPUT1:	CALL KIND			;GET THE FIRST INPUT
		CPI 10H
		JNC GET_INPUT1		;CHECK IF IT IS A VALID HEX DIGIT
		LXI H,0A00H
		ANI 0FH
		MOV M,A			;STORE IT IN MEMORY
		INX H
		JMP GET_INPUT2
		
GET_INPUT2:	CALL KIND			;GET SECOND INPUT
		CPI 10H
		JNC GET_INPUT2		;CHECK IF IT IS A VALID HEX DIGIT
		ANI 0FH
		MOV M,A			;STORE IT IN MEMORY
		LXI D,0A00H		
		CALL STDM	
		CALL DCD			;USE DCD TO DISPLAY THE NUMBER
		JMP CHECK_LED

CHECK_LED:	LXI H,0A01H			;CHECK THRESHOLDS
		MOV A,M
		RLC
		RLC
		RLC
		RLC
		DCX H
		ADD M
		CMP B
		JC CASE_1
		CMP C
		JC CASE_2
CASE_3:	MVI A,04H
		JMP ENABLE_LED
CASE_2:	MVI A,02H
		JMP ENABLE_LED
CASE_1:	MVI A,01H
		JMP ENABLE_LED

ENABLE_LED: 	CMA				;ENABLE THE CORRECT LED
		STA 3000H
		JMP INIT
		
END
		